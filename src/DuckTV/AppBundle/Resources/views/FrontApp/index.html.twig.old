{% extends 'DuckTVAppBundle::layout.html.twig' %}

{% block title %}{{ parent() }}{% endblock %}

{% block body %}
    <div id="fullscreen"><div id="squarefullscreen" class="animate"></div></div>
    <div id="wrap-player" class="noselect">
        <div id="player"></div>
    </div>


    <div class="wrapInfoPlayer">
        <div class="innerInfoPlayer">
            <div class="infoWeather">
                <div class="infoHour">09:31</div>

                {%  set w = weather.weather.0.id %}
                {% if w == 200 or w == 201 or w == 202 or w == 230 or w == 231 or w == 232 %}
                    {% set actualWeather = "very_thunderstorm" %}
                {% elseif w == 210 %}
                    {% set actualWeather = "little_thunderstorm" %}
                {% elseif w == 211 or w == 212 or w == 221 %}
                    {% set actualWeather = "thunderstorm" %}
                {% elseif w == 300 or w == 301 or w == 302 or w == 310 or w == 311 or w == 312 or w == 313 or w == 314 or w == 321 %}
                    {% set actualWeather = "very_rain" %}
                {% elseif w == 500 or w == 501 or w == 502 or w == 503 or w == 504 or w == 511 or w == 520 or w == 521 or w == 522 or w == 531 %}
                    {% set actualWeather = "rain" %}
                {% elseif w == 600 or w == 601 or w == 602 or w == 611 or w == 612 or w == 615 or w == 616 or w == 620 or w == 621 or w == 622 %}
                    {% set actualWeather = "snow" %}
                {% elseif w == 800 %}
                    {# on teste l'heure #}
                    {% if actualDate|date("H")*60 + actualDate|date('i') > 6*60 + 30  and actualDate|date("H")*60 + actualDate|date('i') < 19*60  %}
                        {% set actualWeather = "sun" %}
                    {% else %}
                        {% set actualWeather = "moon" %}
                    {% endif %}
                {% elseif w == 801 %}
                    {# on teste l'heure #}
                    {% if actualDate|date("H")*60 + actualDate|date('i') > 6*60 + 30  and actualDate|date("H")*60 + actualDate|date('i') < 19*60  %}
                        {% set actualWeather = "sun_cloud" %}
                    {% else %}
                        {% set actualWeather = "moon_cloud" %}
                    {% endif %}
                {% elseif w == 803 or w == 804 %}
                    {% set actualWeather = "very_cloud" %}
                {% else %}
                    {% set actualWeather = "cloud" %}
                {% endif %}
                <img class="infoWeatherIcon" src="{{ asset('img/weather/' ~ actualWeather ~ '.svg') }}" />
                <div></div> <!-- casser le display inline block-->
                <div class="infoTemperature"><span></span>{{ weather.main.temp|round|number_format }}°</div>
                <div class="infoWind"><span></span>{{ (weather.wind.speed*3.6)|round|number_format }} km/h</div>
            </div>
            <div class="infoPlayer">
                <div class="barPlayer"></div>
                <div class="infoTweet"></div>
            </div>
        </div>
    </div>

    <script>

        // test fonction
        function loadApplication() {

            // début de la fonction en cas de succès de récup du JSON
            $.getJSON('{{ path("duck_tv_app_get_videos") }}', function(data){

                var current = new Date(data.date.date);

                // on met à jour l'heure
                /*var playerHour = new Date(current);
                setInterval(function(){
                    playerHour.setSeconds(playerHour.getSeconds()+1);
                    $('#heureplayer p').html(("0"+playerHour.getHours()).slice(-2)+":"+("0"+playerHour.getMinutes()).slice(-2)+":"+("0"+playerHour.getSeconds()).slice(-2));
                },1000);*/
                // fin heure player

                var slots = data.slots;
                // on regarde l'heure actuelle, si on se trouve dans un créneau, si on est avant 7h
                // dans combien de temps c'est la prochaine journée 7h etc.

                var result = {};

                for(var slot in slots) {
                    //console.log(slots[slot].beginning.date);
                    var beginning = new Date(slots[slot].beginning.date);
                    var end = new Date(slots[slot].end.date);
                    var duration = slots[slot].duration;
                    var realDuration = slots[slot].realDuration;

                    if(current >= beginning && current < end) {
                        //console.log(slots[slot]);

                        result["beginning"] = beginning;
                        result["end"] = end;
                        result["duration"] = duration;
                        result["realDuration"] = realDuration;
                        result["broadcasts"] = [];

                        for(var broadcast in slots[slot]["broadcasts"]) {
                            var castIdVideo = slots[slot]["broadcasts"][broadcast].video;
                            var castPos = slots[slot]["broadcasts"][broadcast].position;
                            var castDuration = slots[slot]["broadcasts"][broadcast].duration;

                            result["broadcasts"].push({
                                "id" : castIdVideo ,
                                "position" : castPos,
                                "duration" : castDuration
                            });
                        }
                    }
                }

                // liste de diffusion
                var queue = [];
                // curseur de la première vidéo
                var currentVideoStartedFrom = 0;

                // on est dans un créneau d'une heure et demi
                if(!$.isEmptyObject(result)) {

                    var startedFrom = (current - result["beginning"]) / 1000; // durée depuis début du slot en secondes
                    var endedIn = (result["end"] - current) / 1000; // durée jusqu'à la fin du slot en secondes

                    var realEndDate = new Date(result["beginning"].getTime() + result["realDuration"]*1000);
                    var realEnd = (realEndDate - current) / 1000;
                    // si < 0, on a lu l'ensemble des vidéos du slot mais on est encore dedans
                    //console.log(startedFrom);

                    var findCurrentVideo = 0;

                    // cas ou il reste des vidéos à lire dans le créneau
                    if (realEnd > 0) {

                        for (var i = 0; i < result["broadcasts"].length; i++) {
                            findCurrentVideo += result["broadcasts"][i]["duration"];

                            if (findCurrentVideo >= startedFrom) {
                                // on en est à cette vidéo
                                // on pourrait break mais on va plutôt continuer la lecture pour ajouter les vidéos suivantes
                                // en liste d'attente
                                if (queue.length == 0) {
                                    // on stocke la position du curseur de lecture dans la vidéo actuelle
                                    currentVideoStartedFrom = startedFrom - (findCurrentVideo - result["broadcasts"][i]["duration"]);
                                }

                                // on ajoute toutes les vidéos en file d'attente
                                queue.push(result["broadcasts"][i]["id"]);
                            }
                        }

                        // si la durée réelle est plus petite que la durée théorique
                        // il faut remplir la file d'attente avec la vidéo par défaut
                        //console.log(result["realDuration"] + " " + result["duration"]);
                        if(result["realDuration"] < result["duration"]) {
                            //var durationToFill = result["duration"] - result["realDuration"]; // temps qu'il reste de vide dans le slot
                            // trouver la transition qui suit le slot
                            var findTransition = new Date(result["end"]);
                            findTransition.setMinutes(findTransition.getMinutes()+1); // heure qui se trouve dans une transition
                            findTransition = (findTransition.getHours()*60*60 + findTransition.getMinutes()*60 + findTransition.getSeconds());

                            var ts = data.transitions;
                            var myT = [];
                            // pour chaque transition envoyée
                            for (var t in ts) {
                                var myTBeginning = ((new Date(ts[t].beginning.date)).getHours()*60*60 + (new Date(ts[t].beginning.date)).getMinutes()*60 + (new Date(ts[t].beginning.date)).getSeconds());
                                var myTEnd = ((new Date(ts[t].end.date)).getHours()*60*60 + (new Date(ts[t].end.date)).getMinutes()*60 + (new Date(ts[t].end.date)).getSeconds());
                                var myTCurrentTime = (current.getHours()*60*60 + current.getMinutes()*60 + current.getSeconds());
                                if(findTransition >= myTBeginning && findTransition < myTEnd) {
                                    // c'est la bonne transition !
                                    myT["duration"] = ts[t].videoDuration;
                                    myT["id"] = ts[t].id;
                                }
                            }

                            // on a la transition, sa vidéo, son id
                            // plus qu'à boucler pour remplir la queue
                            //console.log(myT);
                            //console.log(findCurrentVideo);
                            /*while(findCurrentVideo < result["duration"]) {
                                queue.push(myT["id"]);
                                findCurrentVideo += myT["duration"];
                            }*/

                            // modif pour alléger le player
                            // cas un peu plus complexe
                            // on doit faire 1 settimeout
                            // debut+realDuration-actuelle
                            var transitionInAdvance = ((new Date(result["beginning"])).getHours()*60*60 + (new Date(result["beginning"])).getMinutes()*60 + (new Date(result["beginning"])).getSeconds())+result["realDuration"]-myTCurrentTime;

                            setTimeout(function(){
                                player.loadVideoById(myT["id"]);
                            }, transitionInAdvance*1000);

                            console.log(transitionInAdvance);

                        }

                        // cas ou toutes les vidéos du créneau ont été lues mais il reste du temps
                    } else {
                        // on remplit la file d'attente avec la transition suivante
                        //var durationToFill = result["duration"] - result["realDuration"]; // temps qu'il reste de vide dans le slot
                        // trouver la transition qui suit le slot
                        var findTransition2 = new Date(result["end"]);
                        findTransition2.setMinutes(findTransition2.getMinutes()+1); // heure qui se trouve dans une transition
                        findTransition2 = (findTransition2.getHours()*60*60 + findTransition2.getMinutes()*60 + findTransition2.getSeconds());

                        var ts2 = data.transitions;
                        var myT2 = [];
                        // pour chaque transition envoyée
                        for (var t2 in ts2) {
                            var myTBeginning2 = ((new Date(ts2[t2].beginning.date)).getHours()*60*60 + (new Date(ts2[t2].beginning.date)).getMinutes()*60 + (new Date(ts2[t2].beginning.date)).getSeconds());
                            var myTEnd2 = ((new Date(ts2[t2].end.date)).getHours()*60*60 + (new Date(ts2[t2].end.date)).getMinutes()*60 + (new Date(ts2[t2].end.date)).getSeconds());
                            if(findTransition2 >= myTBeginning2 && findTransition2 < myTEnd2) {
                                // c'est la bonne transition !
                                myT2["duration"] = ts2[t2].videoDuration;
                                myT2["id"] = ts2[t2].id;
                            }
                        }

                        // on a la transition, sa vidéo, son id
                        // plus qu'à boucler pour remplir la queue
                        //console.log(myT);
                        //console.log(findCurrentVideo);
                        /*var cpt = startedFrom;
                        while(cpt < result["duration"]) {
                            queue.push(myT2["id"]);
                            cpt += myT2["duration"];
                        }*/

                        // modif pour alléger le player
                        // dans ce cas on a juste a faire date de fin créneau - date courante
                        player.loadVideoById(myT2["id"]);
                    }

                    setTimeout(function() {
                        // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                        // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                        // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                        // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                        loadApplication();
                    }, endedIn*1000);

                    // API YT API YT API YT
                    // API YT API YT API YT
                    // API YT API YT API YT
                    // API YT API YT API YT
                    if(typeof queue !== 'undefined' && queue.length > 0) {
                        player.loadPlaylist(queue,0,currentVideoStartedFrom);

                        console.log(queue);
                        console.log(currentVideoStartedFrom);
                    }

                } else {
                    // on n'est pas dans un créneau...

                    // on est un jour de la semaine (lundi, mardi, mercredi, jeudi, vendredi)
                    if(!$.isEmptyObject(slots)) {
                        //console.log("semaine");

                        //console.log(data.transitions);

                        var transitions = data.transitions;
                        var myTransition = {};
                        var tCurrentTime = (current.getHours()*60*60 + current.getMinutes()*60 + current.getSeconds());

                        for(var transition in transitions) {
                            var tDuration = transitions[transition].duration*60; // durée théorique d'une transition en secondes
                            var tVideoDuration = transitions[transition].videoDuration;
                            var tId = transitions[transition].id;
                            var tBeginning = new Date(transitions[transition].beginning.date);
                            var tEnd = new Date(transitions[transition].end.date);

                            var tBeginningTime = (tBeginning.getHours()*60*60 + tBeginning.getMinutes()*60 + tBeginning.getSeconds());
                            var tEndTime = (tEnd.getHours()*60*60 + tEnd.getMinutes()*60 + tEnd.getSeconds());

                            if(tCurrentTime >= tBeginningTime && tCurrentTime < tEndTime) {
                                // c'est la bonne transition !
                                myTransition["duration"] = tVideoDuration;
                                myTransition["id"] = tId;
                                myTransition["beginning"] = tBeginningTime;
                                myTransition["end"] = tEndTime;
                            }
                        }

                        //console.log(myTransition);
                        if(!$.isEmptyObject(myTransition)) {
                            // on a trouvé une transition

                            // on calcule le temps restant entre l'heure actuelle et la fin théorique de la transition
                            //console.log(myTransition["end"] + " " + tCurrentTime);
                            var tCpt = tCurrentTime;

                            while(tCpt < myTransition["end"]) {
                                queue.push(myTransition["id"]);
                                tCpt += myTransition["duration"];
                            }

                            // API YT API YT API YT
                            // API YT API YT API YT
                            player.loadPlaylist(queue,0,currentVideoStartedFrom);
                            // API YT API YT API YT
                            // API YT API YT API YT
                            console.log(queue);

                            var tRemainingTime = myTransition["end"] - tCurrentTime;
                            //console.log(tRemainingTime);

                            setTimeout(function(){
                                loadApplication();
                                // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                            },tRemainingTime*1000);

                        } else {
                            // on est soit avant le début de la diffusion < 7h56 soit après la diffusion > 18h34

                            console.log("trop tot ou trop tard ?");

                            var dayBeginning = new Date(current);
                            var dayEnd = new Date(current);
                            dayBeginning.setHours(7, 56, 0);
                            dayEnd.setHours(18, 34, 0);
                            //console.log(dayBeginning);

                            if(current < dayBeginning ) {
                                // on est avant le début de la diffusion

                                var remainingTime = dayBeginning-current;

                                setTimeout(function(){
                                    loadApplication();
                                    // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                },remainingTime);

                                // API YT API YT API YT
                                // API YT API YT API YT
                                player.loadVideoById(defaultVideo);
                                // API YT API YT API YT
                                // API YT API YT API YT

                            } else if(current > dayEnd) {
                                // on est après la fin de la diffusion

                                var tomorrowBeginning = new Date(dayBeginning);
                                tomorrowBeginning.setHours(tomorrowBeginning.getHours()+24);

                                var remainingTime = tomorrowBeginning-current;

                                setTimeout(function(){
                                    loadApplication();
                                    // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                },remainingTime);

                                // API YT API YT API YT
                                // API YT API YT API YT
                                player.loadVideoById(defaultVideo);
                                // API YT API YT API YT
                                // API YT API YT API YT

                            } else {

                                setTimeout(function(){
                                    loadApplication();
                                    // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                },(60*1000)); // on est perdu on réessaie dans une minute

                                // API YT API YT API YT
                                // API YT API YT API YT
                                player.loadVideoById(defaultVideo);
                                // API YT API YT API YT
                                // API YT API YT API YT

                            }
                        }

                    } else {
                        // on est en weekend (samedi, dimanche)
                        //console.log("weekend");
                        var dayBeginning = new Date(current);
                        dayBeginning.setHours(7, 56, 0);
                        var tomorrowBeginning = new Date(dayBeginning);
                        tomorrowBeginning.setHours(tomorrowBeginning.getHours()+24);

                        var remainingTime = tomorrowBeginning-current;

                        setTimeout(function(){
                            loadApplication();
                            // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                            // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                            // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                            // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                        },remainingTime);

                        // API YT API YT API YT
                        // API YT API YT API YT
                        player.loadVideoById(defaultVideo);
                        // API YT API YT API YT
                        // API YT API YT API YT
                    }
                }


                // EXPLICATIONS:
                // si result n'est pas un tableau vide
                // on est un jour de la semaine sauf week-end
                // ET on est dans un créneau
                // commencé depuis combien de temps ?
                // se finit quand normalement ?
                // se finit vraiment quand ?
                // on trouve la vidéo en cours de lecture
                // avec l'api YT on la lance à la minute voulue
                // on ajoute les vidéos d'APRES à la liste des vidéos à lire

                // L'un ou l'autre ???
                // on fait un settimeout jusqu'à la fin théorique du créneau
                // dans lequel on relance la fonction et la requête ajax
                // sinon
                // on est dans une transition ?
                // si oui :

                // sinon
                // on est le matin avant diffusion
                // on est le soir après diffusion
                // on est un jour du week end


                // date clef 7h tous les matins : on refait un appel

                console.log(current.getHours() + " " + current.getMinutes() + " "+ current.getSeconds());

            }); // fin de la fonction en cas de succès de récup du JSON

        }
    </script>

    <script>
        // 2. This code loads the IFrame Player API code asynchronously.

        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.

        var player;
        var defaultVideo = 'BQCP-3czIpw';
        //var defaultVideo = 'kcwV7xUUgoo';
        var width = $(window).width();
        var height = $(window).height();

        // quand le player est prêt
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: height,
                width: width,
                controls: 0,
                videoId: defaultVideo, // mettre une vidéo par défaut !
                playerVars: {
                    'autoplay': 1,
                    'controls': 0,
                    'rel': 0,
                    'iv_load_policy': 3,
                    'modestbranding': 1,
                    'showinfo': 0
                },
                events: {
                    'onStateChange':
                            function(e){
                                if (e.data === YT.PlayerState.ENDED) {
                                    player.playVideo();
                                }


                                // on essaie de rajouter les infos de la vidéo
                                setInterval(function(){
                                   // $("#texteplayerdiv").html(Math.round(player.getCurrentTime())+"/"+Math.round(player.getDuration())+" - "+ player.getVideoData().title);
                                },1000);
                            }
                }
            });

            // on attend que le player soit prêt pour lancer notre application
            loadApplication();

        }

    </script>

    <script>
        // From : https://davidwalsh.name/fullscreen
        // Find the right method, call on correct element
        function launchIntoFullscreen(element) {
            if(element.requestFullscreen) {
                element.requestFullscreen();
            } else if(element.mozRequestFullScreen) {
                element.mozRequestFullScreen();
            } else if(element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen();
            } else if(element.msRequestFullscreen) {
                element.msRequestFullscreen();
            }
        }

        function exitFullscreen() {
            if(document.exitFullscreen) {
                document.exitFullscreen();
            } else if(document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if(document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            }
        }

        // Launch fullscreen for browsers that support it!
        var mySwitch = false;
        $("#fullscreen").click(function(){
            if(!mySwitch) {
                launchIntoFullscreen(document.documentElement); // the whole page
                mySwitch = true;
            } else {
                exitFullscreen();
                mySwitch = false;
            }
        });

        var mouseTimeout = 0;

        $("#wrap-player").mousemove(function(){
            $("#wrap-player").removeAttr('style');

            clearTimeout(mouseTimeout);
            mouseTimeout = setTimeout(function(){
                $("#wrap-player").css({
                    'cursor': 'none'
                });
            },2000);
        });

        $("#fullscreen").hover(function(){
           $("#squarefullscreen").addClass("squarefullscreenopen");
        }, function(){
            $("#squarefullscreen").removeClass("squarefullscreenopen");
        });

    </script>

{% endblock %}
