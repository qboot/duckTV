{% extends 'DuckTVAppBundle::layout.html.twig' %}

{% block title %}{{ parent() }}{% endblock %}

{% block body %}
    <h1>Ici sera le player</h1>
    <div ng-controller="PlayerController">
        <div id="player"></div>
    </div>

    <script>
        // 2. This code loads the IFrame Player API code asynchronously.

        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.

        function launchYoutubePlayer(playlist,start) {

        }

        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                controls: 0,
                videoId: 'KQS0KILDZ34',
                playerVars: { 'autoplay': 1, 'controls': 0, 'rel': 0, 'iv_load_policy': 3, 'modestbranding': 1, 'showinfo': 0 },
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            player.loadPlaylist(['KQS0KILDZ34','JnXVjqpSGdI'],0,15);
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
                setTimeout(stopVideo, 6000);
                done = true;
            }
        }
        function stopVideo() {
            // player.stopVideo();
        }

        player.loadPlaylist(['KQS0KILDZ34','JnXVjqpSGdI'],0,15);
    </script>

    <!--<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>-->
    <script src="{{ asset("js/angular.js") }}"></script>
    <script>
        var app = angular.module('monApp',[]);
        app.controller('PlayerController',['$scope', '$http', function($scope, $http) {

            // début de la fonction en cas de succès de récup du JSON
            $http.get('{{ path("duck_tv_app_get_videos") }}').success(function(data){

                var current = new Date(data.date.date);

                // lignes pour faciliter le dev, à supprimer
                //current.setHours(current.getHours() - 10);
                current.setHours(17, 45, 0);

                var slots = data.slots;
                // on regarde l'heure actuelle, si on se trouve dans un créneau, si on est avant 7h
                // dans combien de temps c'est la prochaine journée 7h etc.

                var result = {};

                for(var slot in slots) {
                    //console.log(slots[slot].beginning.date);
                    var beginning = new Date(slots[slot].beginning.date);
                    var end = new Date(slots[slot].end.date);
                    var duration = slots[slot].duration;
                    var realDuration = slots[slot].realDuration;

                    if(current >= beginning && current < end) {
                        //console.log(slots[slot]);

                        result["beginning"] = beginning;
                        result["end"] = end;
                        result["duration"] = duration;
                        result["realDuration"] = realDuration;
                        result["broadcasts"] = [];

                        for(var broadcast in slots[slot]["broadcasts"]) {
                            var castIdVideo = slots[slot]["broadcasts"][broadcast].video;
                            var castPos = slots[slot]["broadcasts"][broadcast].position;
                            var castDuration = slots[slot]["broadcasts"][broadcast].duration;

                            result["broadcasts"].push({
                                "id" : castIdVideo ,
                                "position" : castPos,
                                "duration" : castDuration
                            });
                        }
                    }
                }

                // liste de diffusion
                var queue = [];
                // curseur de la première vidéo
                var currentVideoStartedFrom = 0;

                // on est dans un créneau d'une heure et demi
                if(!$.isEmptyObject(result)) {

                    var startedFrom = (current - result["beginning"]) / 1000; // durée depuis début du slot en secondes
                    var endedIn = (result["end"] - current) / 1000; // durée jusqu'à la fin du slot en secondes

                    var realEndDate = new Date(result["beginning"].getTime() + result["realDuration"]*1000);
                    var realEnd = (realEndDate - current) / 1000;
                    // si < 0, on a lu l'ensemble des vidéos du slot mais on est encore dedans
                    //console.log(startedFrom);

                    var findCurrentVideo = 0;

                    // cas ou il reste des vidéos à lire dans le créneau
                    if (realEnd > 0) {

                        for (var i = 0; i < result["broadcasts"].length; i++) {
                            findCurrentVideo += result["broadcasts"][i]["duration"];

                            if (findCurrentVideo >= startedFrom) {
                                // on en est à cette vidéo
                                // on pourrait break mais on va plutôt continuer la lecture pour ajouter les vidéos suivantes
                                // en liste d'attente
                                if (queue.length == 0) {
                                    // on stocke la position du curseur de lecture dans la vidéo actuelle
                                    currentVideoStartedFrom = startedFrom - (findCurrentVideo - result["broadcasts"][i]["duration"]);
                                }

                                // on ajoute toutes les vidéos en file d'attente
                                queue.push(result["broadcasts"][i]["id"]);
                            }
                        }

                        // si la durée réelle est plus petite que la durée théorique
                        // il faut remplir la file d'attente avec la vidéo par défaut
                        //console.log(result["realDuration"] + " " + result["duration"]);
                        if(result["realDuration"] < result["duration"]) {
                            //var durationToFill = result["duration"] - result["realDuration"]; // temps qu'il reste de vide dans le slot
                            // trouver la transition qui suit le slot
                            var findTransition = new Date(result["end"]);
                            findTransition.setMinutes(findTransition.getMinutes()+1); // heure qui se trouve dans une transition
                            findTransition = (findTransition.getHours()*60*60 + findTransition.getMinutes()*60 + findTransition.getSeconds());

                            var ts = data.transitions;
                            var myT = [];
                            // pour chaque transition envoyée
                            for (var t in ts) {
                                var myTBeginning = ((new Date(ts[t].beginning.date)).getHours()*60*60 + (new Date(ts[t].beginning.date)).getMinutes()*60 + (new Date(ts[t].beginning.date)).getSeconds());
                                var myTEnd = ((new Date(ts[t].end.date)).getHours()*60*60 + (new Date(ts[t].end.date)).getMinutes()*60 + (new Date(ts[t].end.date)).getSeconds());
                                if(findTransition >= myTBeginning && findTransition < myTEnd) {
                                    // c'est la bonne transition !
                                    myT["duration"] = ts[t].videoDuration;
                                    myT["id"] = ts[t].id;
                                }
                            }

                            // on a la transition, sa vidéo, son id
                            // plus qu'à boucler pour remplir la queue
                            //console.log(myT);
                            //console.log(findCurrentVideo);
                            while(findCurrentVideo < result["duration"]) {
                                queue.push(myT["id"]);
                                findCurrentVideo += myT["duration"];
                            }
                        }

                    // cas ou toutes les vidéos du créneau ont été lues mais il reste du temps
                    } else {
                        // on remplit la file d'attente avec la transition suivante
                        //var durationToFill = result["duration"] - result["realDuration"]; // temps qu'il reste de vide dans le slot
                        // trouver la transition qui suit le slot
                        var findTransition2 = new Date(result["end"]);
                        findTransition2.setMinutes(findTransition2.getMinutes()+1); // heure qui se trouve dans une transition
                        findTransition2 = (findTransition2.getHours()*60*60 + findTransition2.getMinutes()*60 + findTransition2.getSeconds());

                        var ts2 = data.transitions;
                        var myT2 = [];
                        // pour chaque transition envoyée
                        for (var t2 in ts2) {
                            var myTBeginning2 = ((new Date(ts2[t2].beginning.date)).getHours()*60*60 + (new Date(ts2[t2].beginning.date)).getMinutes()*60 + (new Date(ts2[t2].beginning.date)).getSeconds());
                            var myTEnd2 = ((new Date(ts2[t2].end.date)).getHours()*60*60 + (new Date(ts2[t2].end.date)).getMinutes()*60 + (new Date(ts2[t2].end.date)).getSeconds());
                            if(findTransition2 >= myTBeginning2 && findTransition2 < myTEnd2) {
                                // c'est la bonne transition !
                                myT2["duration"] = ts2[t2].videoDuration;
                                myT2["id"] = ts2[t2].id;
                            }
                        }

                        // on a la transition, sa vidéo, son id
                        // plus qu'à boucler pour remplir la queue
                        //console.log(myT);
                        //console.log(findCurrentVideo);
                        var cpt = startedFrom;
                        while(cpt < result["duration"]) {
                            queue.push(myT2["id"]);
                            cpt += myT2["duration"];
                        }
                    }

                    setTimeout(function() {
                        // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                        // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                        // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                        // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                    }, endedIn*1000);

                    // API YT API YT API YT
                    // API YT API YT API YT
                    // API YT API YT API YT
                    // API YT API YT API YT
                    console.log(queue);
                    console.log(currentVideoStartedFrom);


                } else {
                    // on n'est pas dans un créneau...

                    // on est un jour de la semaine (lundi, mardi, mercredi, jeudi, vendredi)
                    if(!$.isEmptyObject(slots)) {
                        //console.log("semaine");

                        //console.log(data.transitions);

                        var transitions = data.transitions;
                        var myTransition = {};
                        var tCurrentTime = (current.getHours()*60*60 + current.getMinutes()*60 + current.getSeconds());

                        for(var transition in transitions) {
                            var tDuration = transitions[transition].duration*60; // durée théorique d'une transition en secondes
                            var tVideoDuration = transitions[transition].videoDuration;
                            var tId = transitions[transition].id;
                            var tBeginning = new Date(transitions[transition].beginning.date);
                            var tEnd = new Date(transitions[transition].end.date);

                            var tBeginningTime = (tBeginning.getHours()*60*60 + tBeginning.getMinutes()*60 + tBeginning.getSeconds());
                            var tEndTime = (tEnd.getHours()*60*60 + tEnd.getMinutes()*60 + tEnd.getSeconds());

                            if(tCurrentTime >= tBeginningTime && tCurrentTime < tEndTime) {
                                // c'est la bonne transition !
                                myTransition["duration"] = tVideoDuration;
                                myTransition["id"] = tId;
                                myTransition["beginning"] = tBeginningTime;
                                myTransition["end"] = tEndTime;
                            }
                        }

                        //console.log(myTransition);
                        if(!$.isEmptyObject(myTransition)) {
                            // on a trouvé une transition

                            // on calcule le temps restant entre l'heure actuelle et la fin théorique de la transition
                            //console.log(myTransition["end"] + " " + tCurrentTime);
                            var tCpt = tCurrentTime;

                            while(tCpt < myTransition["end"]) {
                                queue.push(myTransition["id"]);
                                tCpt += myTransition["duration"];
                            }

                            // API YT API YT API YT
                            // API YT API YT API YT
                            // API YT API YT API YT
                            console.log(queue);

                            var tRemainingTime = myTransition["end"] - tCurrentTime;
                            //console.log(tRemainingTime);

                            setTimeout(function(){
                                // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                            },tRemainingTime*1000);

                        } else {
                            // on est soit avant le début de la diffusion < 7h56 soit après la diffusion > 18h34

                            console.log("trop tot ou trop tard ?");

                            var dayBeginning = new Date(current);
                            var dayEnd = new Date(current);
                            dayBeginning.setHours(7, 56, 0);
                            dayEnd.setHours(18, 34, 0);
                            //console.log(dayBeginning);

                            if(current < dayBeginning ) {
                                // on est avant le début de la diffusion

                                var remainingTime = dayBeginning-current;

                                setTimeout(function(){
                                    // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                },remainingTime);

                                // API YT API YT API YT
                                // API YT API YT API YT
                                // API YT API YT API YT

                            } else if(current > dayEnd) {
                                // on est après la fin de la diffusion

                                var tomorrowBeginning = new Date(dayBeginning);
                                tomorrowBeginning.setHours(tomorrowBeginning.getHours()+24);

                                var remainingTime = tomorrowBeginning-current;

                                setTimeout(function(){
                                    // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                },remainingTime);

                                // API YT API YT API YT
                                // API YT API YT API YT
                                // API YT API YT API YT

                            } else {

                                setTimeout(function(){
                                    // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                    // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                                },(60*1000)); // on est perdu on réessaie dans une minute

                                // API YT API YT API YT
                                // API YT API YT API YT
                                // API YT API YT API YT

                            }
                        }

                    } else {
                        // on est en weekend (samedi, dimanche)
                        //console.log("weekend");
                        var dayBeginning = new Date(current);
                        dayBeginning.setHours(7, 56, 0);
                        var tomorrowBeginning = new Date(dayBeginning);
                        tomorrowBeginning.setHours(tomorrowBeginning.getHours()+24);

                        var remainingTime = tomorrowBeginning-current;

                        setTimeout(function(){
                            // sera déclanché à la fin théorique du slot, ie. 9h26, 10h54, etc
                            // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                            // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                            // ICI IL FAUDRAIT RELANCER UN APPEL JSON ET REFAIRE TOUT LE PROCESS
                        },remainingTime);

                        // API YT API YT API YT
                        // API YT API YT API YT
                        // API YT API YT API YT
                    }
                }


                // EXPLICATIONS:
                // si result n'est pas un tableau vide
                    // on est un jour de la semaine sauf week-end
                    // ET on est dans un créneau
                        // commencé depuis combien de temps ?
                        // se finit quand normalement ?
                        // se finit vraiment quand ?
                        // on trouve la vidéo en cours de lecture
                        // avec l'api YT on la lance à la minute voulue
                        // on ajoute les vidéos d'APRES à la liste des vidéos à lire

                        // L'un ou l'autre ???
                        // on fait un settimeout jusqu'à la fin théorique du créneau
                            // dans lequel on relance la fonction et la requête ajax
                // sinon
                    // on est dans une transition ?
                        // si oui :

                        // sinon
                            // on est le matin avant diffusion
                            // on est le soir après diffusion
                            // on est un jour du week end


                // date clef 7h tous les matins : on refait un appel

                console.log(current.getHours() + " " + current.getMinutes() + " "+ current.getSeconds());

            }); // fin de la fonction en cas de succès de récup du JSON
        }]);
    </script>
{% endblock %}
